{"version":3,"sources":["shared/components/UIElements/Card.js","user/pages/Auth.js"],"names":["Card","props","className","style","children","Auth","auth","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","password","formState","inputHandler","setFormData","authSubmitHandler","event","preventDefault","process","JSON","stringify","inputs","responseData","login","userId","token","formData","FormData","append","name","image","onClear","asOverlay","onSubmit","element","id","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","center","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","onClick","undefined","prevMode"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,4/MC0JEC,UA/IF,WACT,IAAMC,EAAOC,qBAAWC,KACxB,EAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsDC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WAEvC,EAA+CC,YAC3C,CACIC,MAAO,CACHC,MAAO,GACPC,SAAS,GAEbC,SAAU,CACNF,MAAO,GACPC,SAAS,KAGjB,GAXJ,mBAAOE,EAAP,KAAkBC,EAAlB,KAAgCC,EAAhC,KA2CMC,EAAiB,uCAAG,WAAMC,GAAN,8EACtBA,EAAMC,kBAGFjB,EAJkB,0CAMaK,EAC3Ba,kDACI,OACAC,KAAKC,UAAU,CACXZ,MAAOI,EAAUS,OAAOb,MAAMC,MAC9BE,SAAUC,EAAUS,OAAOV,SAASF,QAExC,CACI,eAAgB,qBAdV,OAMRa,EANQ,OAkBd1B,EAAK2B,MAAMD,EAAaE,OAAQF,EAAaG,OAlB/B,kGAuBRC,EAAW,IAAIC,UACZC,OAAO,QAAShB,EAAUS,OAAOb,MAAMC,OAChDiB,EAASE,OAAO,OAAQhB,EAAUS,OAAOQ,KAAKpB,OAC9CiB,EAASE,OAAO,WAAYhB,EAAUS,OAAOV,SAASF,OACtDiB,EAASE,OAAO,QAAShB,EAAUS,OAAOS,MAAMrB,OA3BlC,UA4BaJ,EAAYa,mDACnC,OACAQ,GA9BU,QA4BRJ,EA5BQ,OAiCd1B,EAAK2B,MAAMD,EAAaE,OAAQF,EAAaG,OAjC/B,oHAAH,sDAuCvB,OACI,oCACI,kBAAC,IAAD,CAAYrB,MAAOA,EAAO2B,QAASzB,IACnC,kBAAC,IAAD,CAAMd,UAAU,kBACXW,GAAa,kBAAC,IAAD,CAAgB6B,WAAS,IACvC,8CACA,6BACA,0BAAMC,SAAUlB,IACVf,GACE,kBAAC,IAAD,CACIkC,QAAQ,QACRC,GAAG,OACHC,KAAK,OACLC,MAAM,YACNC,WAAY,CAACC,eACbC,UAAU,uBACVC,QAAS5B,KAGfb,GAAe,kBAAC,IAAD,CACb0C,QAAM,EACNP,GAAG,QACHM,QAAS5B,EACT2B,UAAU,4BAGd,kBAAC,IAAD,CACIN,QAAQ,QACRC,GAAG,QACHC,KAAK,QACLC,MAAM,SACNC,WAAY,CAACK,eACbH,UAAU,sCACVC,QAAS5B,IAEb,kBAAC,IAAD,CACIqB,QAAQ,QACRC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,wDACVC,QAAS5B,IAEb,kBAAC,IAAD,CAAQuB,KAAK,SAASS,UAAWjC,EAAUF,SACtCV,EAAc,QAAU,WAGjC,kBAAC,IAAD,CAAQ8C,SAAO,EAACC,QApHF,WACjB/C,EAUDc,EAAY,2BAEDF,EAAUS,QAFV,IAGHQ,KAAM,CACFpB,MAAO,GACPC,SAAS,GAEboB,MAAO,CACHrB,MAAO,KACPC,SAAS,MAGjB,GArBJI,EAAY,2BAEDF,EAAUS,QAFV,IAGHQ,UAAMmB,EACNlB,WAAOkB,IAEXpC,EAAUS,OAAOb,MAAME,SAAWE,EAAUS,OAAOV,SAASD,SAkBpET,GAAe,SAAAgD,GAAQ,OAAKA,OA0FpB,aACejD,EAAc,SAAW","file":"static/js/7.cb68ee60.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState, useContext } from 'react';\r\n\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport Input from '../../shared/components/FormElement/Input';\r\nimport Button from '../../shared/components/FormElement/Button';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ImageUpload from '../../shared/components/FormElement/ImageUpload';\r\nimport {\r\n    VALIDATOR_EMAIL,\r\n    VALIDATOR_MINLENGTH,\r\n    VALIDATOR_REQUIRE\r\n} from '../../shared/util/validator';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport './Auth.css';\r\n\r\nconst Auth = () => {\r\n    const auth = useContext(AuthContext);\r\n    const [isLoginMode, setIsLoginMode] = useState(true);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n    const [formState, inputHandler, setFormData] = useForm(\r\n        {\r\n            email: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            password: {\r\n                value: '',\r\n                isValid: false\r\n            }\r\n        },\r\n        false\r\n    );\r\n\r\n    const switchModeHandler = () => {\r\n        if (!isLoginMode) {\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: undefined,\r\n                    image: undefined,\r\n                },\r\n                formState.inputs.email.isValid && formState.inputs.password.isValid\r\n            );\r\n        } else {\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: {\r\n                        value: '',\r\n                        isValid: false\r\n                    },\r\n                    image: {\r\n                        value: null,\r\n                        isValid: false\r\n                    }\r\n                },\r\n                false\r\n            );\r\n        }\r\n        setIsLoginMode(prevMode => !prevMode);\r\n    };\r\n\r\n    const authSubmitHandler = async event => {\r\n        event.preventDefault();\r\n\r\n\r\n        if (isLoginMode) {\r\n            try {\r\n                const responseData = await sendRequest(\r\n                process.env.REACT_APP_BACKEND_URL + '/users/login',\r\n                    'POST',\r\n                    JSON.stringify({\r\n                        email: formState.inputs.email.value,\r\n                        password: formState.inputs.password.value\r\n                    }),\r\n                    {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                );\r\n\r\n                auth.login(responseData.userId, responseData.token);\r\n            } catch (err) { }\r\n\r\n        } else {\r\n            try {\r\n                const formData = new FormData();\r\n                formData.append('email', formState.inputs.email.value);\r\n                formData.append('name', formState.inputs.name.value);\r\n                formData.append('password', formState.inputs.password.value);\r\n                formData.append('image', formState.inputs.image.value);\r\n                const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + '/users/signup',\r\n                    'POST',\r\n                    formData\r\n                );\r\n\r\n                auth.login(responseData.userId, responseData.token);\r\n            } catch (err) { }\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            <Card className=\"authentication\">\r\n                {isLoading && <LoadingSpinner asOverlay />}\r\n                <h2>Login Required</h2>\r\n                <hr />\r\n                <form onSubmit={authSubmitHandler}>\r\n                    {!isLoginMode && (\r\n                        <Input\r\n                            element=\"input\"\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            label=\"Your Name\"\r\n                            validators={[VALIDATOR_REQUIRE()]}\r\n                            errorText=\"Please enter a name.\"\r\n                            onInput={inputHandler}\r\n                        />\r\n                    )}\r\n                    {!isLoginMode && <ImageUpload\r\n                        center\r\n                        id=\"image\"\r\n                        onInput={inputHandler}\r\n                        errorText=\"Please Provide an Image\"\r\n                    />\r\n                    }\r\n                    <Input\r\n                        element=\"input\"\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        label=\"E-Mail\"\r\n                        validators={[VALIDATOR_EMAIL()]}\r\n                        errorText=\"Please enter a valid email address.\"\r\n                        onInput={inputHandler}\r\n                    />\r\n                    <Input\r\n                        element=\"input\"\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        validators={[VALIDATOR_MINLENGTH(6)]}\r\n                        errorText=\"Please enter a valid password, at least 6 characters.\"\r\n                        onInput={inputHandler}\r\n                    />\r\n                    <Button type=\"submit\" disabled={!formState.isValid}>\r\n                        {isLoginMode ? 'LOGIN' : 'SIGNUP'}\r\n                    </Button>\r\n                </form>\r\n                <Button inverse onClick={switchModeHandler}>\r\n                    SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\r\n                </Button>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n"],"sourceRoot":""}